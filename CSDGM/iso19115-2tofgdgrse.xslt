<?xml version="1.0" encoding="UTF-8"?>
<!--
======================================================================
	ISO 19115-2 to FGDC RSE Transform using XPath 2.0 for NOAA/OAR/OER

	This is the XML Style sheet that transforms metadata conforming to the ISO 19115-2 Geographic information - Metadata Part 2: Extensions for imagery and gridded data  
	ISO19115-2:2009(E) to the Content Standard for Digital Geospatial Metadata: Extensions for Remote Sensing Metadata FGDC-STD-012-2002.  This stylesheet can be 
	applied to ISO 19115-2 XML to generate FGDC RSE XML. This transform was created specifically for NOAA/OAR/OER - Ocean Exploration and Research. 

	This file was generated by Altova MapForce 2009sp1

	Authors:
	This is the result of a collaboration of the Metadata Transform Working Group. For further information, please contact NOAA's National Coastal Data Development Center (NCDDC).
				National Coastal Data Development Center
				Toll Free: 866.732.2382
				E-mail: ncddcmetadata@noaa.gov

	Distribution liability:
		NOAA makes no warranty regarding these data, expressed or implied, nor does the fact of distribution constitute such a warranty. NOAA, NESDIS, NODC and NCDDC cannot 
		assume liability for any damages caused by any errors or omissions in these data, nor as a result of the failure of these data to function on a particular system. These files 
		were developed for opensource uses.

	Revisions:
		20110927 (JLM) Updated keyword mapping. 
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:gco="http://www.isotc211.org/2005/gco" xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gmi="http://www.isotc211.org/2005/gmi" xmlns:gmx="http://www.isotc211.org/2005/gmx" xmlns:gsr="http://www.isotc211.org/2005/gsr" xmlns:gss="http://www.isotc211.org/2005/gss" xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:srv="http://www.isotc211.org/2005/srv" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:grp="http://www.altova.com/Mapforce/grouping">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='unknown'">
				<xsl:value-of select="'Unknown'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='completed'">
				<xsl:value-of select="'complete'"/>
			</xsl:when>
			<xsl:when test="$input='complete'">
				<xsl:value-of select="'complete'"/>
			</xsl:when>
			<xsl:when test="$input='historicalArchive'">
				<xsl:value-of select="'complete'"/>
			</xsl:when>
			<xsl:when test="$input='onGoing'">
				<xsl:value-of select="'In Work'"/>
			</xsl:when>
			<xsl:when test="$input='planned'">
				<xsl:value-of select="'Planned'"/>
			</xsl:when>
			<xsl:when test="$input='underDevelopment'">
				<xsl:value-of select="'In Work'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='continual'">
				<xsl:value-of select="'Continually'"/>
			</xsl:when>
			<xsl:when test="$input='daily'">
				<xsl:value-of select="'Daily'"/>
			</xsl:when>
			<xsl:when test="$input='weekly'">
				<xsl:value-of select="'Weekly'"/>
			</xsl:when>
			<xsl:when test="$input='fortnightly'">
				<xsl:value-of select="'Weekly'"/>
			</xsl:when>
			<xsl:when test="$input='monthly'">
				<xsl:value-of select="'Monthly'"/>
			</xsl:when>
			<xsl:when test="$input='yearly'">
				<xsl:value-of select="'Annually'"/>
			</xsl:when>
			<xsl:when test="$input='annually'">
				<xsl:value-of select="'Annually'"/>
			</xsl:when>
			<xsl:when test="$input='unknown'">
				<xsl:value-of select="'Unknown'"/>
			</xsl:when>
			<xsl:when test="$input='as needed'">
				<xsl:value-of select="'As needed'"/>
			</xsl:when>
			<xsl:when test="$input='irregular'">
				<xsl:value-of select="'Irregular'"/>
			</xsl:when>
			<xsl:when test="$input='not planned'">
				<xsl:value-of select="'None planned'"/>
			</xsl:when>
			<xsl:when test="$input='none planned'">
				<xsl:value-of select="'None planned'"/>
			</xsl:when>
			<xsl:when test="$input='none'">
				<xsl:value-of select="'None planned'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf4_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='discipline'">
				<xsl:value-of select="'theme'"/>
			</xsl:when>
			<xsl:when test="$input='theme'">
				<xsl:value-of select="'theme'"/>
			</xsl:when>
			<xsl:when test="$input='place'">
				<xsl:value-of select="'place'"/>
			</xsl:when>
			<xsl:when test="$input='stratum'">
				<xsl:value-of select="'stratum'"/>
			</xsl:when>
			<xsl:when test="$input='temporal'">
				<xsl:value-of select="'temporal'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'theme'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:function name="grp:key0b219d80">
		<xsl:param name="cur"/>
		<xsl:for-each select="$cur/gmd:MD_Keywords/gmd:keyword/gco:CharacterString">
			<xsl:sequence select="xs:string(.)"/>
		</xsl:for-each>
	</xsl:function>
	<xsl:template match="/">
		<metadata>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" separator=" ">
				<xsl:sequence select="'Q:/users/mize.jacqueline/fgdc-std-012-2002(rs)/fgdc-std-012-2002.xsd'"/>
			</xsl:attribute>
			<xsl:variable name="var1_instance" as="node()" select="."/>
			<idinfo>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:fileIdentifier/gco:CharacterString">
					<datsetid>
						<xsl:sequence select="xs:string(.)"/>
					</datsetid>
				</xsl:for-each>
				<citation>
					<citeinfo>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
							<origin>
								<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
							</origin>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
							<origin>
								<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
							</origin>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:positionName/gco:CharacterString">
							<origin>
								<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
							</origin>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date">
							<xsl:variable name="var10_CI_Date" as="node()" select="."/>
							<xsl:if test="$var10_CI_Date/gmd:date/@gco:nilReason">
								<xsl:variable name="var12_result_vmf1_inputtoresult" as="xs:string?">
									<xsl:call-template name="vmf:vmf1_inputtoresult">
										<xsl:with-param name="input" select="xs:string(xs:string(gmd:date/@gco:nilReason))"/>
									</xsl:call-template>
								</xsl:variable>
								<xsl:if test="fn:exists($var12_result_vmf1_inputtoresult)">
									<pubdate>
										<xsl:sequence select="xs:string(xs:string($var12_result_vmf1_inputtoresult))"/>
									</pubdate>
								</xsl:if>
							</xsl:if>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:title/gco:CharacterString">
							<title>
								<xsl:sequence select="xs:string(.)"/>
							</title>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:edition/gco:CharacterString">
							<edition>
								<xsl:sequence select="xs:string(.)"/>
							</edition>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:presentationForm/gmd:CI_PresentationFormCode">
							<xsl:variable name="var17_CI_PresentationFormCode" as="node()" select="."/>
							<xsl:if test="$var17_CI_PresentationFormCode/@codeListValue">
								<geoform>
									<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
								</geoform>
							</xsl:if>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:series">
							<serinfo>
								<xsl:for-each select="gmd:CI_Series/gmd:name/gco:CharacterString">
									<sername>
										<xsl:sequence select="xs:string(.)"/>
									</sername>
								</xsl:for-each>
								<xsl:for-each select="gmd:CI_Series/gmd:issueIdentification/gco:CharacterString">
									<issue>
										<xsl:sequence select="xs:string(.)"/>
									</issue>
								</xsl:for-each>
							</serinfo>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:otherCitationDetails/gco:CharacterString">
							<othercit>
								<xsl:sequence select="xs:string(.)"/>
							</othercit>
						</xsl:for-each>
						<lworkcit>
							<citeinfo>
								<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:aggregationInfo/gmd:MD_AggregateInformation/gmd:aggregateDataSetIdentifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
									<origin>
										<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
									</origin>
								</xsl:for-each>
								<pubdate>
									<xsl:sequence select="xs:string(xs:string('Unknown'))"/>
								</pubdate>
								<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:aggregationInfo/gmd:MD_AggregateInformation/gmd:initiativeType/gmd:DS_InitiativeTypeCode">
									<title>
										<xsl:sequence select="xs:string(.)"/>
									</title>
								</xsl:for-each>
							</citeinfo>
						</lworkcit>
					</citeinfo>
				</citation>
				<descript>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:abstract/gco:CharacterString">
						<abstract>
							<xsl:sequence select="xs:string(.)"/>
						</abstract>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:purpose/gco:CharacterString">
						<purpose>
							<xsl:sequence select="xs:string(.)"/>
						</purpose>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:supplementalInformation/gco:CharacterString">
						<supplinf>
							<xsl:sequence select="xs:string(.)"/>
						</supplinf>
					</xsl:for-each>
				</descript>
				<timeperd>
					<timeinfo>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimeInstant">
							<sngdate/>
						</xsl:for-each>
						<rngdates>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:beginPosition">
								<begdate>
									<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(xs:string(xs:string(.)), '-'), fn:substring(fn:substring-after(xs:string(xs:string(.)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:string(.)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
								</begdate>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:endPosition">
								<enddate>
									<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(xs:string(xs:string(.)), '-'), fn:substring(fn:substring-after(xs:string(xs:string(.)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:string(.)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
								</enddate>
							</xsl:for-each>
						</rngdates>
					</timeinfo>
					<current>
						<xsl:sequence select="xs:string(xs:string('ground condition'))"/>
					</current>
				</timeperd>
				<status>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:status/gmd:MD_ProgressCode">
						<xsl:variable name="var43_MD_ProgressCode" as="node()" select="."/>
						<xsl:if test="$var43_MD_ProgressCode/@codeListValue">
							<xsl:variable name="var45_result_vmf2_inputtoresult" as="xs:string?">
								<xsl:call-template name="vmf:vmf2_inputtoresult">
									<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:if test="fn:exists($var45_result_vmf2_inputtoresult)">
								<progress>
									<xsl:sequence select="xs:string(xs:token($var45_result_vmf2_inputtoresult))"/>
								</progress>
							</xsl:if>
						</xsl:if>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceMaintenance/gmd:MD_MaintenanceInformation/gmd:maintenanceAndUpdateFrequency/gmd:MD_MaintenanceFrequencyCode">
						<xsl:variable name="var46_MD_MaintenanceFrequencyCode" as="node()" select="."/>
						<xsl:if test="$var46_MD_MaintenanceFrequencyCode/@codeListValue">
							<xsl:variable name="var48_result_vmf3_inputtoresult" as="xs:string?">
								<xsl:call-template name="vmf:vmf3_inputtoresult">
									<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:if test="fn:exists($var48_result_vmf3_inputtoresult)">
								<update>
									<xsl:sequence select="xs:string(xs:string($var48_result_vmf3_inputtoresult))"/>
								</update>
							</xsl:if>
						</xsl:if>
					</xsl:for-each>
				</status>
				<spdom>
					<bounding>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:westBoundLongitude/gco:Decimal">
							<westbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</westbc>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:eastBoundLongitude/gco:Decimal">
							<eastbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</eastbc>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:northBoundLatitude/gco:Decimal">
							<northbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</northbc>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:southBoundLatitude/gco:Decimal">
							<southbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</southbc>
						</xsl:for-each>
					</bounding>
				</spdom>
				<xsl:variable name="var57_map_result_groupby" as="xs:string*">
					<xsl:for-each-group select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords" group-by="grp:key0b219d80(.)">
						<xsl:sequence select="''"/>
					</xsl:for-each-group>
				</xsl:variable>
				<xsl:for-each select="fn:distinct-values($var57_map_result_groupby)">
					<keywords>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
							<xsl:variable name="var60_MD_Keywords" as="node()" select="."/>
							<xsl:for-each select="gmd:type/gmd:MD_KeywordTypeCode">
								<xsl:variable name="var62_MD_KeywordTypeCode" as="node()" select="."/>
								<xsl:if test="$var62_MD_KeywordTypeCode/@codeListValue">
									<xsl:variable name="var64_result_vmf4_inputtoresult" as="xs:string?">
										<xsl:call-template name="vmf:vmf4_inputtoresult">
											<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var64_result_vmf4_inputtoresult)">
										<xsl:variable name="var66_cond_result_equal" as="xs:string?">
											<xsl:if test="($var64_result_vmf4_inputtoresult = 'theme')">
												<xsl:for-each select="$var60_MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var66_cond_result_equal)">
											<theme>
												<themekt>
													<xsl:sequence select="xs:string(xs:string($var66_cond_result_equal))"/>
												</themekt>
												<xsl:for-each select="$var60_MD_Keywords/gmd:keyword/gco:CharacterString">
													<xsl:if test="($var64_result_vmf4_inputtoresult = 'theme')">
														<themekey>
															<xsl:sequence select="xs:string(.)"/>
														</themekey>
													</xsl:if>
												</xsl:for-each>
											</theme>
										</xsl:if>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
						<theme>
							<themekt>
								<xsl:sequence select="xs:string(xs:string('ISO 19115 Topic Category'))"/>
							</themekt>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:topicCategory/gmd:MD_TopicCategoryCode">
								<themekey>
									<xsl:sequence select="xs:string(.)"/>
								</themekey>
							</xsl:for-each>
						</theme>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
							<xsl:variable name="var75_MD_Keywords" as="node()" select="."/>
							<xsl:for-each select="gmd:type/gmd:MD_KeywordTypeCode">
								<xsl:variable name="var77_MD_KeywordTypeCode" as="node()" select="."/>
								<xsl:if test="$var77_MD_KeywordTypeCode/@codeListValue">
									<xsl:variable name="var79_result_vmf4_inputtoresult" as="xs:string?">
										<xsl:call-template name="vmf:vmf4_inputtoresult">
											<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var79_result_vmf4_inputtoresult)">
										<xsl:variable name="var81_cond_result_equal" as="xs:string?">
											<xsl:if test="($var79_result_vmf4_inputtoresult = 'place')">
												<xsl:for-each select="$var75_MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var81_cond_result_equal)">
											<place>
												<placekt>
													<xsl:sequence select="xs:string(xs:string($var81_cond_result_equal))"/>
												</placekt>
												<xsl:for-each select="$var75_MD_Keywords/gmd:keyword/gco:CharacterString">
													<xsl:if test="($var79_result_vmf4_inputtoresult = 'place')">
														<placekey>
															<xsl:sequence select="xs:string(.)"/>
														</placekey>
													</xsl:if>
												</xsl:for-each>
											</place>
										</xsl:if>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
							<xsl:variable name="var88_MD_Keywords" as="node()" select="."/>
							<xsl:for-each select="gmd:type/gmd:MD_KeywordTypeCode">
								<xsl:variable name="var90_MD_KeywordTypeCode" as="node()" select="."/>
								<xsl:if test="$var90_MD_KeywordTypeCode/@codeListValue">
									<xsl:variable name="var92_result_vmf4_inputtoresult" as="xs:string?">
										<xsl:call-template name="vmf:vmf4_inputtoresult">
											<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var92_result_vmf4_inputtoresult)">
										<xsl:variable name="var94_cond_result_equal" as="xs:string?">
											<xsl:if test="($var92_result_vmf4_inputtoresult = 'stratum')">
												<xsl:for-each select="$var88_MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var94_cond_result_equal)">
											<stratum>
												<stratkt>
													<xsl:sequence select="xs:string(xs:string($var94_cond_result_equal))"/>
												</stratkt>
												<xsl:for-each select="$var88_MD_Keywords/gmd:keyword/gco:CharacterString">
													<xsl:if test="($var92_result_vmf4_inputtoresult = 'stratum')">
														<stratkey>
															<xsl:sequence select="xs:string(.)"/>
														</stratkey>
													</xsl:if>
												</xsl:for-each>
											</stratum>
										</xsl:if>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
							<xsl:variable name="var101_MD_Keywords" as="node()" select="."/>
							<xsl:for-each select="gmd:type/gmd:MD_KeywordTypeCode">
								<xsl:variable name="var103_MD_KeywordTypeCode" as="node()" select="."/>
								<xsl:if test="$var103_MD_KeywordTypeCode/@codeListValue">
									<xsl:variable name="var105_result_vmf4_inputtoresult" as="xs:string?">
										<xsl:call-template name="vmf:vmf4_inputtoresult">
											<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var105_result_vmf4_inputtoresult)">
										<xsl:variable name="var107_cond_result_equal" as="xs:string?">
											<xsl:if test="($var105_result_vmf4_inputtoresult = 'temporal')">
												<xsl:for-each select="$var101_MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var107_cond_result_equal)">
											<temporal>
												<tempkt>
													<xsl:sequence select="xs:string(xs:string($var107_cond_result_equal))"/>
												</tempkt>
												<xsl:for-each select="$var101_MD_Keywords/gmd:keyword/gco:CharacterString">
													<xsl:if test="($var105_result_vmf4_inputtoresult = 'temporal')">
														<tempkey>
															<xsl:sequence select="xs:string(.)"/>
														</tempkey>
													</xsl:if>
												</xsl:for-each>
											</temporal>
										</xsl:if>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</keywords>
				</xsl:for-each>
				<thelayid>
					<numthlay>
						<xsl:sequence select="xs:string(xs:integer(xs:decimal(1)))"/>
					</numthlay>
					<layrname>
						<theme>
							<themekt>
								<xsl:sequence select="xs:string(xs:string('None'))"/>
							</themekt>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:alternateTitle/gco:CharacterString">
								<themekey>
									<xsl:sequence select="xs:string(.)"/>
								</themekey>
							</xsl:for-each>
						</theme>
					</layrname>
				</thelayid>
				<xsl:variable name="var125_map_select_MI_Metadata" as="xs:string*">
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode">
						<xsl:sequence select="xs:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var122_cond_result_exists" as="xs:string*">
					<xsl:choose>
						<xsl:when test="fn:exists($var125_map_select_MI_Metadata)">
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode">
								<xsl:sequence select="xs:string(.)"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:otherConstraints/gco:CharacterString">
								<xsl:sequence select="xs:string(.)"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:for-each select="$var122_cond_result_exists">
					<accconst>
						<xsl:sequence select="xs:string(xs:string(.))"/>
					</accconst>
				</xsl:for-each>
				<xsl:variable name="var136_map_select_MI_Metadata" as="xs:string*">
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:useConstraints/gmd:MD_RestrictionCode">
						<xsl:sequence select="xs:string(.)"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var133_cond_result_exists" as="xs:string*">
					<xsl:choose>
						<xsl:when test="fn:exists($var136_map_select_MI_Metadata)">
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:useConstraints/gmd:MD_RestrictionCode">
								<xsl:sequence select="xs:string(.)"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:otherConstraints/gco:CharacterString">
								<xsl:sequence select="xs:string(.)"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:for-each select="$var133_cond_result_exists">
					<useconst>
						<xsl:sequence select="xs:string(xs:string(.))"/>
					</useconst>
				</xsl:for-each>
				<ptcontac>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:pointOfContact/gmd:CI_ResponsibleParty">
						<xsl:variable name="var144_CI_ResponsibleParty" as="node()" select="."/>
						<cntinfo>
							<xsl:variable name="var146_cond_result_exists" as="xs:string?">
								<xsl:if test="not(fn:exists(gmd:organisationName/gco:CharacterString))">
									<xsl:for-each select="gmd:individualName/gco:CharacterString">
										<xsl:sequence select="xs:string(.)"/>
									</xsl:for-each>
								</xsl:if>
							</xsl:variable>
							<xsl:if test="fn:exists($var146_cond_result_exists)">
								<cntperp>
									<cntper>
										<xsl:sequence select="$var146_cond_result_exists"/>
									</cntper>
								</cntperp>
							</xsl:if>
							<xsl:variable name="var150_cond_result_exists" as="xs:string?">
								<xsl:if test="fn:exists(gmd:organisationName/gco:CharacterString)">
									<xsl:for-each select="gmd:organisationName/gco:CharacterString">
										<xsl:sequence select="xs:string(.)"/>
									</xsl:for-each>
								</xsl:if>
							</xsl:variable>
							<xsl:if test="fn:exists($var150_cond_result_exists)">
								<cntorgp>
									<cntorg>
										<xsl:sequence select="$var150_cond_result_exists"/>
									</cntorg>
									<xsl:variable name="var151_cond_result_exists" as="xs:string?">
										<xsl:if test="fn:exists(gmd:organisationName/gco:CharacterString)">
											<xsl:for-each select="gmd:individualName/gco:CharacterString">
												<xsl:sequence select="xs:string(.)"/>
											</xsl:for-each>
										</xsl:if>
									</xsl:variable>
									<xsl:if test="fn:exists($var151_cond_result_exists)">
										<cntper>
											<xsl:sequence select="$var151_cond_result_exists"/>
										</cntper>
									</xsl:if>
								</cntorgp>
							</xsl:if>
							<xsl:for-each select="gmd:positionName/gco:CharacterString">
								<cntpos>
									<xsl:sequence select="xs:string(.)"/>
								</cntpos>
							</xsl:for-each>
							<cntaddr>
								<addrtype>
									<xsl:sequence select="xs:string(xs:string('mailing'))"/>
								</addrtype>
								<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:deliveryPoint/gco:CharacterString">
									<address>
										<xsl:sequence select="xs:string(.)"/>
									</address>
								</xsl:for-each>
								<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:city/gco:CharacterString">
									<city>
										<xsl:sequence select="xs:string(.)"/>
									</city>
								</xsl:for-each>
								<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:administrativeArea/gco:CharacterString">
									<state>
										<xsl:sequence select="xs:string(.)"/>
									</state>
								</xsl:for-each>
								<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:postalCode/gco:CharacterString">
									<postal>
										<xsl:sequence select="xs:string(.)"/>
									</postal>
								</xsl:for-each>
								<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:country/gco:CharacterString">
									<country>
										<xsl:sequence select="xs:string(.)"/>
									</country>
								</xsl:for-each>
							</cntaddr>
							<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:voice/gco:CharacterString">
								<cntvoice>
									<xsl:sequence select="xs:string(.)"/>
								</cntvoice>
							</xsl:for-each>
							<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:facsimile/gco:CharacterString">
								<cntfax>
									<xsl:sequence select="xs:string(.)"/>
								</cntfax>
							</xsl:for-each>
							<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString">
								<cntemail>
									<xsl:sequence select="xs:string(.)"/>
								</cntemail>
							</xsl:for-each>
							<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:hoursOfService/gco:CharacterString">
								<hours>
									<xsl:sequence select="xs:string(.)"/>
								</hours>
							</xsl:for-each>
							<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:contactInstructions/gco:CharacterString">
								<cntinst>
									<xsl:sequence select="xs:string(.)"/>
								</cntinst>
							</xsl:for-each>
						</cntinfo>
					</xsl:for-each>
				</ptcontac>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:graphicOverview">
					<browse>
						<xsl:for-each select="gmd:MD_BrowseGraphic/gmd:fileName/gco:CharacterString">
							<browsen>
								<xsl:sequence select="xs:string(.)"/>
							</browsen>
						</xsl:for-each>
						<xsl:for-each select="gmd:MD_BrowseGraphic/gmd:fileDescription/gco:CharacterString">
							<browsed>
								<xsl:sequence select="xs:string(.)"/>
							</browsed>
						</xsl:for-each>
						<xsl:for-each select="gmd:MD_BrowseGraphic/gmd:fileType/gco:CharacterString">
							<browset>
								<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
							</browset>
						</xsl:for-each>
					</browse>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:credit/gco:CharacterString">
					<datacred>
						<xsl:sequence select="xs:string(.)"/>
					</datacred>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_SecurityConstraints">
					<secinfo>
						<xsl:for-each select="gmd:classificationSystem/gco:CharacterString">
							<secsys>
								<xsl:sequence select="xs:string(.)"/>
							</secsys>
						</xsl:for-each>
						<xsl:for-each select="gmd:handlingDescription/gco:CharacterString">
							<secclass>
								<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
							</secclass>
						</xsl:for-each>
						<xsl:for-each select="gmd:userNote/gco:CharacterString">
							<sechandl>
								<xsl:sequence select="xs:string(.)"/>
							</sechandl>
						</xsl:for-each>
					</secinfo>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:otherConstraints/gco:CharacterString">
					<native>
						<xsl:sequence select="xs:string(.)"/>
					</native>
				</xsl:for-each>
			</idinfo>
			<eainfo>
				<overview>
					<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:contentInfo/gmd:MD_FeatureCatalogueDescription/gmd:featureCatalogueCitation/gmd:CI_Citation/gmd:otherCitationDetails/gco:CharacterString">
						<eaover>
							<xsl:sequence select="xs:string(.)"/>
						</eaover>
					</xsl:for-each>
					<xsl:variable name="var207_map_select_MI_Metadata" as="xs:string*">
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:contentInfo/gmd:MD_FeatureCatalogueDescription/gmd:featureCatalogueCitation/gmd:CI_Citation/gmd:title/@gco:nilReason">
							<xsl:sequence select="xs:string(xs:string(.))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var202_cond_result_exists" as="xs:string*">
						<xsl:choose>
							<xsl:when test="fn:exists($var207_map_select_MI_Metadata)">
								<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:contentInfo/gmd:MD_FeatureCatalogueDescription/gmd:featureCatalogueCitation/gmd:CI_Citation/gmd:title/@gco:nilReason">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:contentInfo/gmd:MD_FeatureCatalogueDescription/gmd:featureCatalogueCitation/gmd:CI_Citation/gmd:title/gco:CharacterString">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="$var202_cond_result_exists">
						<xsl:variable name="var203_cur_cond_result_exists" as="xs:string" select="."/>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:contentInfo/gmd:MD_FeatureCatalogueDescription/gmd:featureCatalogueCitation/gmd:CI_Citation/gmd:date">
							<xsl:variable name="var205_date" as="node()" select="."/>
							<xsl:if test="$var205_date/@gco:nilReason">
								<eadetcit>
									<xsl:sequence select="fn:concat(fn:concat($var203_cur_cond_result_exists, ' '), xs:string(xs:string(@gco:nilReason)))"/>
								</eadetcit>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
				</overview>
			</eainfo>
			<metainfo>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:dateStamp/gco:Date">
					<metd>
						<xsl:sequence select="xs:string(xs:token(fn:concat(fn:concat(fn:substring-before(xs:string(xs:string(.)), '-'), fn:substring(fn:substring-after(xs:string(xs:string(.)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:string(.)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
					</metd>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/gco:Date">
					<metfrd>
						<xsl:sequence select="xs:string(xs:token(fn:concat(fn:concat(fn:substring-before(xs:string(xs:string(.)), '-'), fn:substring(fn:substring-after(xs:string(xs:string(.)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:string(.)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
					</metfrd>
				</xsl:for-each>
				<metc>
					<cntinfo>
						<xsl:variable name="var219_cond_result_exists" as="xs:string?">
							<xsl:if test="not(fn:exists($var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString))">
								<xsl:variable name="var223_map_select_MI_Metadata" as="xs:string*">
									<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
										<xsl:sequence select="xs:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists($var223_map_select_MI_Metadata)">
									<xsl:sequence select="fn:string-join($var223_map_select_MI_Metadata, ' ')"/>
								</xsl:if>
							</xsl:if>
						</xsl:variable>
						<xsl:for-each select="$var219_cond_result_exists">
							<cntperp>
								<cntper>
									<xsl:sequence select="."/>
								</cntper>
							</cntperp>
						</xsl:for-each>
						<xsl:variable name="var226_cond_result_exists" as="xs:string?">
							<xsl:if test="fn:exists($var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
								<xsl:variable name="var237_map_select_MI_Metadata" as="xs:string*">
									<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
										<xsl:sequence select="xs:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists($var237_map_select_MI_Metadata)">
									<xsl:sequence select="fn:string-join($var237_map_select_MI_Metadata, ' ')"/>
								</xsl:if>
							</xsl:if>
						</xsl:variable>
						<xsl:for-each select="$var226_cond_result_exists">
							<cntorgp>
								<cntorg>
									<xsl:sequence select="."/>
								</cntorg>
								<xsl:variable name="var229_cond_result_exists" as="xs:string?">
									<xsl:if test="fn:exists($var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
										<xsl:variable name="var233_map_select_MI_Metadata" as="xs:string*">
											<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
												<xsl:sequence select="xs:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists($var233_map_select_MI_Metadata)">
											<xsl:sequence select="fn:string-join($var233_map_select_MI_Metadata, ' ')"/>
										</xsl:if>
									</xsl:if>
								</xsl:variable>
								<xsl:for-each select="$var229_cond_result_exists">
									<cntper>
										<xsl:sequence select="."/>
									</cntper>
								</xsl:for-each>
							</cntorgp>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:positionName/gco:CharacterString">
							<cntpos>
								<xsl:sequence select="xs:string(.)"/>
							</cntpos>
						</xsl:for-each>
						<cntaddr>
							<addrtype>
								<xsl:sequence select="xs:string(xs:string('mailing'))"/>
							</addrtype>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:deliveryPoint/gco:CharacterString">
								<address>
									<xsl:sequence select="xs:string(.)"/>
								</address>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:city/gco:CharacterString">
								<city>
									<xsl:sequence select="xs:string(.)"/>
								</city>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:administrativeArea/gco:CharacterString">
								<state>
									<xsl:sequence select="xs:string(.)"/>
								</state>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:postalCode/gco:CharacterString">
								<postal>
									<xsl:sequence select="xs:string(.)"/>
								</postal>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:country/gco:CharacterString">
								<country>
									<xsl:sequence select="xs:string(.)"/>
								</country>
							</xsl:for-each>
						</cntaddr>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:voice/gco:CharacterString">
							<cntvoice>
								<xsl:sequence select="xs:string(.)"/>
							</cntvoice>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:facsimile/gco:CharacterString">
							<cntfax>
								<xsl:sequence select="xs:string(.)"/>
							</cntfax>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString">
							<cntemail>
								<xsl:sequence select="xs:string(.)"/>
							</cntemail>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:hoursOfService/gco:CharacterString">
							<hours>
								<xsl:sequence select="xs:string(.)"/>
							</hours>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:contactInstructions/gco:CharacterString">
							<cntinst>
								<xsl:sequence select="xs:string(.)"/>
							</cntinst>
						</xsl:for-each>
					</cntinfo>
				</metc>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataStandardName/gco:CharacterString">
					<metstdn>
						<xsl:sequence select="xs:string(xs:string(fn:concat('FGDC Content Standard for Digital Geospatial Metadata from ', xs:string(.))))"/>
					</metstdn>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmd:metadataStandardVersion/gco:CharacterString">
					<metstdv>
						<xsl:sequence select="fn:concat('FGDC-STD-001-1998 automatically transfromed from ', xs:string(.))"/>
					</metstdv>
				</xsl:for-each>
				<metextns>
					<onlink>
						<xsl:sequence select="'http://www.fgdc.gov/standards/projects/FGDC-standards-projects/csdgm_rs_ex/MetadataRemoteSensingExtens.pdf'"/>
					</onlink>
					<metprof>
						<xsl:sequence select="'Content Standard for Digital Geospatial Metadata: Extensions for Remote Sensing Metadata'"/>
					</metprof>
				</metextns>
			</metainfo>
			<plmiinfo>
				<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmi:acquisitionInformation/gmi:MI_AcquisitionInformation/gmi:platform">
					<xsl:variable name="var266_platform" as="node()" select="."/>
					<platinfo>
						<platstdt>
							<sngdate>
								<caldate>
									<xsl:sequence select="xs:string(xs:string('Unknown'))"/>
								</caldate>
							</sngdate>
						</platstdt>
						<xsl:for-each select="gmi:MI_Platform/gmi:sponsor/gmd:CI_ResponsibleParty">
							<xsl:variable name="var268_CI_ResponsibleParty" as="node()" select="."/>
							<xsl:for-each select="gmd:individualName/gco:CharacterString">
								<xsl:variable name="var270_CharacterString" as="node()" select="."/>
								<xsl:for-each select="$var268_CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode">
									<xsl:variable name="var272_CI_RoleCode" as="node()" select="."/>
									<xsl:if test="$var272_CI_RoleCode/@codeListValue">
										<platspon>
											<xsl:sequence select="fn:concat(fn:concat(xs:string($var270_CharacterString), ' '), xs:string(xs:anyURI(@codeListValue)))"/>
										</platspon>
									</xsl:if>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="gmi:MI_Platform/gmi:sponsor/gmd:CI_ResponsibleParty">
							<xsl:variable name="var274_CI_ResponsibleParty" as="node()" select="."/>
							<xsl:for-each select="gmd:organisationName/gco:CharacterString">
								<xsl:variable name="var276_CharacterString" as="node()" select="."/>
								<xsl:for-each select="$var274_CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode">
									<xsl:variable name="var278_CI_RoleCode" as="node()" select="."/>
									<xsl:if test="$var278_CI_RoleCode/@codeListValue">
										<platspon>
											<xsl:sequence select="fn:concat(fn:concat(xs:string($var276_CharacterString), ' '), xs:string(xs:anyURI(@codeListValue)))"/>
										</platspon>
									</xsl:if>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:variable name="var283_map_select_MI_Platform" as="xs:string?">
							<xsl:for-each select="gmi:MI_Platform/gmi:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
								<xsl:sequence select="xs:string(.)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var280_cond_result_exists" as="xs:string?">
							<xsl:choose>
								<xsl:when test="fn:exists($var283_map_select_MI_Platform)">
									<xsl:for-each select="gmi:MI_Platform/gmi:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
										<xsl:sequence select="xs:string(.)"/>
									</xsl:for-each>
								</xsl:when>
								<xsl:otherwise>
									<xsl:for-each select="gmi:MI_Platform/gmi:identifier/gmd:RS_Identifier/gmd:code/gco:CharacterString">
										<xsl:sequence select="xs:string(.)"/>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="fn:exists($var280_cond_result_exists)">
							<xsl:for-each select="gmi:MI_Platform/gmi:description/gco:CharacterString">
								<platdesc>
									<xsl:sequence select="fn:concat(fn:concat($var280_cond_result_exists, ' '), xs:string(.))"/>
								</platdesc>
							</xsl:for-each>
						</xsl:if>
					</platinfo>
				</xsl:for-each>
			</plmiinfo>
			<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmi:acquisitionInformation/gmi:MI_AcquisitionInformation/gmi:platform/gmi:MI_Platform/gmi:instrument">
				<xsl:variable name="var291_instrument" as="node()" select="."/>
				<instinfo>
					<instref>
						<citeinfo>
							<xsl:variable name="var297_map_select_MI_Instrument" as="xs:string*">
								<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var296_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var297_map_select_MI_Instrument)">
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var293_cond_result_exists" as="xs:string*" select="(if (fn:exists($var296_cond_result_exists)) then $var296_cond_result_exists else 'Unknown')"/>
							<xsl:for-each select="$var293_cond_result_exists">
								<origin>
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</origin>
							</xsl:for-each>
							<xsl:variable name="var312_map_select_MI_Instrument" as="xs:string*">
								<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var309_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var312_map_select_MI_Instrument)">
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:DateTime">
											<xsl:sequence select="xs:string(xs:dateTime(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var308_map_cond_result_exists" as="xs:string*">
								<xsl:for-each select="$var309_cond_result_exists">
									<xsl:sequence select="fn:concat(fn:concat(fn:substring-before(., '-'), fn:substring(fn:substring-after(., '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(., xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var305_cond_result_exists" as="xs:string*" select="(if (fn:exists($var308_map_cond_result_exists)) then $var308_map_cond_result_exists else 'Unknown')"/>
							<xsl:for-each select="$var305_cond_result_exists">
								<pubdate>
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</pubdate>
							</xsl:for-each>
							<xsl:variable name="var321_map_select_MI_Instrument" as="xs:string?">
								<xsl:for-each select="gmi:MI_Instrument/gmi:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var320_cond_result_exists" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists($var321_map_select_MI_Instrument)">
										<xsl:for-each select="gmi:MI_Instrument/gmi:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="gmi:MI_Instrument/gmi:identifier/gmd:MD_Identifier/gmd:code/@gco:nilReason">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var320_cond_result_exists)">
								<title>
									<xsl:sequence select="$var320_cond_result_exists"/>
								</title>
							</xsl:if>
							<xsl:for-each select="gmi:MI_Instrument/gmi:type/gco:CharacterString">
								<othercit>
									<xsl:sequence select="xs:string(.)"/>
								</othercit>
							</xsl:for-each>
						</citeinfo>
					</instref>
				</instinfo>
			</xsl:for-each>
			<xsl:for-each select="$var1_instance/gmi:MI_Metadata/gmi:acquisitionInformation/gmi:MI_AcquisitionInformation/gmi:instrument">
				<xsl:variable name="var331_instrument" as="node()" select="."/>
				<instinfo>
					<instref>
						<citeinfo>
							<xsl:variable name="var337_map_select_MI_Instrument" as="xs:string*">
								<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var336_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var337_map_select_MI_Instrument)">
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var333_cond_result_exists" as="xs:string*" select="(if (fn:exists($var336_cond_result_exists)) then $var336_cond_result_exists else 'Unknown')"/>
							<xsl:for-each select="$var333_cond_result_exists">
								<origin>
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</origin>
							</xsl:for-each>
							<xsl:variable name="var352_map_select_MI_Instrument" as="xs:string*">
								<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var349_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var352_map_select_MI_Instrument)">
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="gmi:MI_Instrument/gmi:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:DateTime">
											<xsl:sequence select="xs:string(xs:dateTime(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var348_map_cond_result_exists" as="xs:string*">
								<xsl:for-each select="$var349_cond_result_exists">
									<xsl:sequence select="fn:concat(fn:concat(fn:substring-before(., '-'), fn:substring(fn:substring-after(., '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(., xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var345_cond_result_exists" as="xs:string*" select="(if (fn:exists($var348_map_cond_result_exists)) then $var348_map_cond_result_exists else 'Unknown')"/>
							<xsl:for-each select="$var345_cond_result_exists">
								<pubdate>
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</pubdate>
							</xsl:for-each>
							<xsl:variable name="var361_map_select_MI_Instrument" as="xs:string?">
								<xsl:for-each select="gmi:MI_Instrument/gmi:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var360_cond_result_exists" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists($var361_map_select_MI_Instrument)">
										<xsl:for-each select="gmi:MI_Instrument/gmi:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="gmi:MI_Instrument/gmi:identifier/gmd:MD_Identifier/gmd:code/@gco:nilReason">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var360_cond_result_exists)">
								<title>
									<xsl:sequence select="$var360_cond_result_exists"/>
								</title>
							</xsl:if>
							<xsl:for-each select="gmi:MI_Instrument/gmi:type/gco:CharacterString">
								<othercit>
									<xsl:sequence select="xs:string(.)"/>
								</othercit>
							</xsl:for-each>
						</citeinfo>
					</instref>
				</instinfo>
			</xsl:for-each>
		</metadata>
	</xsl:template>
</xsl:stylesheet>
