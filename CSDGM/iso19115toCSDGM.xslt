<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
======================================================================
	 ISO 19115 to FGDC CSDGM Transform version 1.1 using XPath 2.0

	 This is the XML Style sheet that transforms metadata conforming to  ISO 19115:2003(E) to the Content Standards for Digital Geospatial Metadata of the Federal Geographic Data Committee 
	 June 1998 FGDC-STD-001-1998 version.  This stylesheet can be applied to ISO 19115 XML to generate FGDC CSDGM XML.

	 This file was generated by Altova MapForce 2009sp1

	 Authors:
	     This is the result of a collaboration of the Metadata Transform Working Group. For further information, please contact NOAA's National Coastal Data 
	     Development Center (NCDDC).
				National Coastal Data Development Center
				Toll Free: 866.732.2382
				E-mail: ncddcmetadata@noaa.gov

	 Distribution liability:
		 NOAA makes no warranty regarding these data, expressed or implied, nor does the fact of distribution constitute such a warranty. NOAA, NESDIS, 
		 NODC and NCDDC cannot assume liability for any damages caused by any errors or omissions in these data, nor as a result of the failure of these data 
		 to function on a particular system. These files were developed for opensource uses.

 Revisions: 
		 20100407 (JLM) Cleaned up the dates and mapped over Data Quality attributes.
						 
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:gco="http://www.isotc211.org/2005/gco" xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gsr="http://www.isotc211.org/2005/gsr" xmlns:gss="http://www.isotc211.org/2005/gss" xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:grp="http://www.altova.com/Mapforce/grouping">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='documentDigital'">
				<xsl:value-of select="''"/>
			</xsl:when>
			<xsl:when test="$input='imageDigital'">
				<xsl:value-of select="'image'"/>
			</xsl:when>
			<xsl:when test="$input='documentHardcopy'">
				<xsl:value-of select="'document'"/>
			</xsl:when>
			<xsl:when test="$input='imageHardcopy'">
				<xsl:value-of select="'image'"/>
			</xsl:when>
			<xsl:when test="$input='mapDigital'">
				<xsl:value-of select="'map'"/>
			</xsl:when>
			<xsl:when test="$input='mapHardcopy'">
				<xsl:value-of select="'map'"/>
			</xsl:when>
			<xsl:when test="$input='modelDigital'">
				<xsl:value-of select="'model'"/>
			</xsl:when>
			<xsl:when test="$input='modelHardcopy'">
				<xsl:value-of select="'model '"/>
			</xsl:when>
			<xsl:when test="$input='profileDigital'">
				<xsl:value-of select="'profile'"/>
			</xsl:when>
			<xsl:when test="$input='profileHardcopy'">
				<xsl:value-of select="'profile'"/>
			</xsl:when>
			<xsl:when test="$input='tableDigital'">
				<xsl:value-of select="'spreadsheet'"/>
			</xsl:when>
			<xsl:when test="$input='tableHardcopy'">
				<xsl:value-of select="'spreadsheet'"/>
			</xsl:when>
			<xsl:when test="$input='videoDigital'">
				<xsl:value-of select="'video'"/>
			</xsl:when>
			<xsl:when test="$input='videoHardcopy'">
				<xsl:value-of select="'video'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='completed'">
				<xsl:value-of select="'Complete'"/>
			</xsl:when>
			<xsl:when test="$input='historicalArchive'">
				<xsl:value-of select="'Complete'"/>
			</xsl:when>
			<xsl:when test="$input='obsolete'">
				<xsl:value-of select="'Complete'"/>
			</xsl:when>
			<xsl:when test="$input='onGoing'">
				<xsl:value-of select="'In Work'"/>
			</xsl:when>
			<xsl:when test="$input='planned'">
				<xsl:value-of select="'Planned'"/>
			</xsl:when>
			<xsl:when test="$input='required'">
				<xsl:value-of select="'Planned'"/>
			</xsl:when>
			<xsl:when test="$input='underDevelopment'">
				<xsl:value-of select="'In Work'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='continual'">
				<xsl:value-of select="'Continually'"/>
			</xsl:when>
			<xsl:when test="$input='daily'">
				<xsl:value-of select="'Daily'"/>
			</xsl:when>
			<xsl:when test="$input='weekly'">
				<xsl:value-of select="'Weekly'"/>
			</xsl:when>
			<xsl:when test="$input='fortnightly'">
				<xsl:value-of select="'Every Two Weeks'"/>
			</xsl:when>
			<xsl:when test="$input='monthly'">
				<xsl:value-of select="'Monthly'"/>
			</xsl:when>
			<xsl:when test="$input='quarterly'">
				<xsl:value-of select="'Quarterly'"/>
			</xsl:when>
			<xsl:when test="$input='biannually'">
				<xsl:value-of select="'Twice a Year'"/>
			</xsl:when>
			<xsl:when test="$input='annually'">
				<xsl:value-of select="'Annually'"/>
			</xsl:when>
			<xsl:when test="$input='asNeeded'">
				<xsl:value-of select="'As Needed'"/>
			</xsl:when>
			<xsl:when test="$input='irregular'">
				<xsl:value-of select="'Irregular'"/>
			</xsl:when>
			<xsl:when test="$input='notPlanned'">
				<xsl:value-of select="'None Planned'"/>
			</xsl:when>
			<xsl:when test="$input='unknown'">
				<xsl:value-of select="'Unknown'"/>
			</xsl:when>
			<xsl:when test="$input='unknwon'">
				<xsl:value-of select="'Unknown'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="ISO-8859-1" indent="yes"/>
	<xsl:function name="grp:key057dc228">
		<xsl:param name="cur"/>
		<xsl:for-each select="$cur/gco:CharacterString">
			<xsl:sequence select="xs:string(.)"/>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="grp:key059410a8">
		<xsl:param name="cur"/>
		<xsl:for-each select="$cur/gco:CharacterString">
			<xsl:sequence select="xs:string(.)"/>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="grp:key10a39ac0">
		<xsl:param name="cur"/>
		<xsl:for-each select="$cur/gco:CharacterString">
			<xsl:sequence select="xs:string(.)"/>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="grp:key1231d868">
		<xsl:param name="cur"/>
		<xsl:for-each select="$cur/gco:CharacterString">
			<xsl:sequence select="xs:string(.)"/>
		</xsl:for-each>
	</xsl:function>
	<xsl:template match="/">
		<metadata>
			<xsl:variable name="var1_instance" as="node()" select="."/>
			<idinfo>
				<citation>
					<citeinfo>
						<xsl:variable name="var2_cond_result_exists" as="xs:string?">
							<xsl:choose>
								<xsl:when test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
									<xsl:variable name="var20_map_select_MD_Metadata" as="xs:string*">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var20_map_select_MD_Metadata)">
										<xsl:sequence select="xs:string(fn:string-join($var20_map_select_MD_Metadata, ' '))"/>
									</xsl:if>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="''"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:for-each select="$var2_cond_result_exists">
							<xsl:variable name="var3_cur_cond_result_exists" as="xs:string" select="."/>
							<xsl:variable name="var5_cond_result_exists" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:positionName/gco:CharacterString)">
										<xsl:variable name="var16_map_select_MD_Metadata" as="xs:string*">
											<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:positionName/gco:CharacterString">
												<xsl:sequence select="xs:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists($var16_map_select_MD_Metadata)">
											<xsl:sequence select="xs:string(fn:string-join($var16_map_select_MD_Metadata, ' '))"/>
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var5_cond_result_exists">
								<xsl:variable name="var6_cur_cond_result_exists" as="xs:string" select="."/>
								<xsl:variable name="var8_cond_result_exists" as="xs:string?">
									<xsl:choose>
										<xsl:when test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString)">
											<xsl:variable name="var12_map_select_MD_Metadata" as="xs:string*">
												<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:if test="fn:exists($var12_map_select_MD_Metadata)">
												<xsl:sequence select="xs:string(fn:string-join($var12_map_select_MD_Metadata, ' '))"/>
											</xsl:if>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:for-each select="$var8_cond_result_exists">
									<origin>
										<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:concat(fn:concat($var3_cur_cond_result_exists, ' '), $var6_cur_cond_result_exists), ' '), .)))"/>
									</origin>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:variable name="var23_cond_result_exists">
							<xsl:if test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/@gco:nilReason)">
								<xsl:variable name="var41_map_select_MD_Metadata">
									<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date">
										<xsl:variable name="var42_CI_Date" as="node()" select="."/>
										<xsl:if test="$var42_CI_Date/gmd:date/@gco:nilReason">
											<xsl:sequence select="xs:string(gmd:date/@gco:nilReason)"/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists($var41_map_select_MD_Metadata)">
									<xsl:sequence select="xs:anySimpleType(fn:string-join(for $x in $var41_map_select_MD_Metadata return xs:string($x), ' '))"/>
								</xsl:if>
							</xsl:if>
						</xsl:variable>
						<xsl:for-each select="$var23_cond_result_exists">
							<xsl:variable name="var24_cur_cond_result_exists" select="."/>
							<xsl:variable name="var32_map_select_MD_Metadata" as="xs:string*">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var26_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var32_map_select_MD_Metadata)">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:DateTime">
											<xsl:sequence select="xs:string(xs:dateTime(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var26_cond_result_exists">
								<xsl:variable name="var29_map_select_MD_Metadata" as="xs:boolean*">
									<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:dateType/gmd:CI_DateTypeCode">
										<xsl:if test="(xs:string(xs:anyURI(@codeListValue)) = 'publication')">
											<xsl:sequence select="fn:true()"/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists($var29_map_select_MD_Metadata)">
									<pubdate>
										<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:concat(xs:string($var24_cur_cond_result_exists), fn:substring-before(., '-')), fn:substring(fn:substring-after(., '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(., xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
									</pubdate>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:title/gco:CharacterString">
							<title>
								<xsl:sequence select="xs:string(.)"/>
							</title>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:edition/gco:CharacterString">
							<edition>
								<xsl:sequence select="xs:string(.)"/>
							</edition>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:presentationForm/gmd:CI_PresentationFormCode">
							<xsl:variable name="var50_result_vmf1_inputtoresult" as="xs:string?">
								<xsl:call-template name="vmf:vmf1_inputtoresult">
									<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:if test="fn:exists($var50_result_vmf1_inputtoresult)">
								<geoform>
									<xsl:sequence select="xs:string(xs:string($var50_result_vmf1_inputtoresult))"/>
								</geoform>
							</xsl:if>
						</xsl:for-each>
						<serinfo>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:series/gmd:CI_Series/gmd:name/gco:CharacterString">
								<sername>
									<xsl:sequence select="xs:string(.)"/>
								</sername>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:series/gmd:CI_Series/gmd:issueIdentification/gco:CharacterString">
								<issue>
									<xsl:sequence select="xs:string(.)"/>
								</issue>
							</xsl:for-each>
						</serinfo>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:otherCitationDetails/gco:CharacterString">
							<othercit>
								<xsl:sequence select="xs:string(.)"/>
							</othercit>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataSetURI/gco:CharacterString">
							<onlink>
								<xsl:sequence select="xs:string(.)"/>
							</onlink>
						</xsl:for-each>
					</citeinfo>
				</citation>
				<descript>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:abstract/gco:CharacterString">
						<abstract>
							<xsl:sequence select="xs:string(.)"/>
						</abstract>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:purpose/gco:CharacterString">
						<purpose>
							<xsl:sequence select="xs:string(.)"/>
						</purpose>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:supplementalInformation/gco:CharacterString">
						<supplinf>
							<xsl:sequence select="xs:string(.)"/>
						</supplinf>
					</xsl:for-each>
				</descript>
				<timeperd>
					<timeinfo>
						<sngdate>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimeInstant">
								<caldate>
									<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(xs:string(xs:string(gml:timePosition)), '-'), fn:substring(fn:substring-after(xs:string(xs:string(gml:timePosition)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:string(gml:timePosition)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
								</caldate>
							</xsl:for-each>
						</sngdate>
						<rngdates>
							<xsl:variable name="var70_map_select_MD_Metadata" as="xs:string*">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:beginPosition">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var67_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var70_map_select_MD_Metadata)">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:beginPosition">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:begin/gml:TimeInstant/gml:timePosition">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var67_cond_result_exists">
								<begdate>
									<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(., '-'), fn:substring(fn:substring-after(., '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(., xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
								</begdate>
							</xsl:for-each>
							<xsl:variable name="var81_map_select_MD_Metadata" as="xs:string*">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:endPosition">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var78_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var81_map_select_MD_Metadata)">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:endPosition">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:end/gml:TimeInstant/gml:timePosition">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var78_cond_result_exists">
								<enddate>
									<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(., '-'), fn:substring(fn:substring-after(., '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(., xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
								</enddate>
							</xsl:for-each>
						</rngdates>
					</timeinfo>
				</timeperd>
				<status>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:status/gmd:MD_ProgressCode">
						<xsl:variable name="var91_result_vmf2_inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf2_inputtoresult">
								<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:if test="fn:exists($var91_result_vmf2_inputtoresult)">
							<progress>
								<xsl:sequence select="xs:string(xs:token($var91_result_vmf2_inputtoresult))"/>
							</progress>
						</xsl:if>
					</xsl:for-each>
					<xsl:variable name="var92_cond_result_exists" as="xs:string?">
						<xsl:choose>
							<xsl:when test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceMaintenance/gmd:MD_MaintenanceInformation/gmd:maintenanceAndUpdateFrequency/gmd:MD_MaintenanceFrequencyCode/@codeListValue)">
								<xsl:variable name="var96_map_select_MD_Metadata" as="xs:string*">
									<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceMaintenance/gmd:MD_MaintenanceInformation/gmd:maintenanceAndUpdateFrequency/gmd:MD_MaintenanceFrequencyCode">
										<xsl:variable name="var99_result_vmf3_inputtoresult" as="xs:string?">
											<xsl:call-template name="vmf:vmf3_inputtoresult">
												<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="fn:exists($var99_result_vmf3_inputtoresult)">
											<xsl:sequence select="$var99_result_vmf3_inputtoresult"/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists($var96_map_select_MD_Metadata)">
									<xsl:sequence select="xs:string(fn:string-join($var96_map_select_MD_Metadata, ' '))"/>
								</xsl:if>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="$var92_cond_result_exists">
						<update>
							<xsl:sequence select="xs:string(xs:string(.))"/>
						</update>
					</xsl:for-each>
				</status>
				<spdom>
					<bounding>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:westBoundLongitude/gco:Decimal">
							<westbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</westbc>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:eastBoundLongitude/gco:Decimal">
							<eastbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</eastbc>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:northBoundLatitude/gco:Decimal">
							<gmd:orthbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</gmd:orthbc>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:southBoundLatitude/gco:Decimal">
							<southbc>
								<xsl:sequence select="xs:string(xs:double(xs:decimal(.)))"/>
							</southbc>
						</xsl:for-each>
					</bounding>
					<dsgpoly>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_BoundingPolygon/gmd:polygon/gml:Polygon">
							<dsgpolyo>
								<xsl:for-each select="gml:interior/gml:Ring">
									<xsl:variable name="var110_Ring" as="node()" select="."/>
									<xsl:if test="$var110_Ring/@aggregationType">
										<gring>
											<xsl:sequence select="xs:string(@aggregationType)"/>
										</gring>
									</xsl:if>
								</xsl:for-each>
							</dsgpolyo>
						</xsl:for-each>
					</dsgpoly>
				</spdom>
				<keywords>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
						<xsl:variable name="var112_MD_Keywords" as="node()" select="."/>
						<xsl:for-each select="gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
							<xsl:variable name="var116_map_select_type" as="xs:boolean?">
								<xsl:for-each select="$var112_MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode">
									<xsl:if test="(xs:string(xs:anyURI(@codeListValue)) = 'theme')">
										<xsl:sequence select="fn:true()"/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists($var116_map_select_type)">
								<theme>
									<themekt>
										<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
									</themekt>
									<xsl:for-each-group select="$var112_MD_Keywords/gmd:keyword" group-by="grp:key057dc228(.)">
										<xsl:variable name="var121_cur_result_groupby" as="xs:string" select="current-grouping-key()"/>
										<themekey>
											<xsl:sequence select="$var121_cur_result_groupby"/>
										</themekey>
									</xsl:for-each-group>
								</theme>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
					<theme>
						<themekt>
							<xsl:variable name="var125_cond_result_exists" as="xs:string" select="(if (fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:topicCategory/gmd:MD_TopicCategoryCode)) then 'ISO 19115 Topic Category' else '')"/>
							<xsl:sequence select="xs:string(xs:string($var125_cond_result_exists))"/>
						</themekt>
						<xsl:variable name="var126_cond_result_exists" as="xs:string?">
							<xsl:choose>
								<xsl:when test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:topicCategory/gmd:MD_TopicCategoryCode)">
									<xsl:variable name="var130_map_select_MD_Metadata" as="xs:string*">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:topicCategory/gmd:MD_TopicCategoryCode">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var130_map_select_MD_Metadata)">
										<xsl:sequence select="xs:string(fn:string-join($var130_map_select_MD_Metadata, ' '))"/>
									</xsl:if>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="''"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:for-each select="$var126_cond_result_exists">
							<themekey>
								<xsl:sequence select="."/>
							</themekey>
						</xsl:for-each>
					</theme>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
						<xsl:variable name="var133_MD_Keywords" as="node()" select="."/>
						<xsl:for-each select="gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
							<xsl:variable name="var137_map_select_type" as="xs:boolean?">
								<xsl:for-each select="$var133_MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode">
									<xsl:if test="(xs:string(xs:anyURI(@codeListValue)) = 'place')">
										<xsl:sequence select="fn:true()"/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists($var137_map_select_type)">
								<place>
									<placekt>
										<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
									</placekt>
									<xsl:for-each-group select="$var133_MD_Keywords/gmd:keyword" group-by="grp:key059410a8(.)">
										<xsl:variable name="var142_cur_result_groupby" as="xs:string" select="current-grouping-key()"/>
										<placekey>
											<xsl:sequence select="$var142_cur_result_groupby"/>
										</placekey>
									</xsl:for-each-group>
								</place>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
						<xsl:variable name="var146_MD_Keywords" as="node()" select="."/>
						<xsl:for-each select="gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
							<xsl:variable name="var150_map_select_type" as="xs:boolean?">
								<xsl:for-each select="$var146_MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode">
									<xsl:if test="(xs:string(xs:anyURI(@codeListValue)) = 'stratum')">
										<xsl:sequence select="fn:true()"/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists($var150_map_select_type)">
								<stratum>
									<stratkt>
										<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
									</stratkt>
									<xsl:for-each-group select="$var146_MD_Keywords/gmd:keyword" group-by="grp:key10a39ac0(.)">
										<xsl:variable name="var155_cur_result_groupby" as="xs:string" select="current-grouping-key()"/>
										<stratkey>
											<xsl:sequence select="$var155_cur_result_groupby"/>
										</stratkey>
									</xsl:for-each-group>
								</stratum>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords">
						<xsl:variable name="var159_MD_Keywords" as="node()" select="."/>
						<xsl:for-each select="gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString">
							<xsl:variable name="var163_map_select_type" as="xs:boolean?">
								<xsl:for-each select="$var159_MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode">
									<xsl:if test="(xs:string(xs:anyURI(@codeListValue)) = 'temporal')">
										<xsl:sequence select="fn:true()"/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists($var163_map_select_type)">
								<temporal>
									<tempkt>
										<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
									</tempkt>
									<xsl:for-each-group select="$var159_MD_Keywords/gmd:keyword" group-by="grp:key1231d868(.)">
										<xsl:variable name="var168_cur_result_groupby" as="xs:string" select="current-grouping-key()"/>
										<tempkey>
											<xsl:sequence select="$var168_cur_result_groupby"/>
										</tempkey>
									</xsl:for-each-group>
								</temporal>
							</xsl:if>
						</xsl:for-each>
					</xsl:for-each>
				</keywords>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:accessConstraints/gmd:MD_RestrictionCode">
					<accconst>
						<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
					</accconst>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:useConstraints/gmd:MD_RestrictionCode">
					<useconst>
						<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
					</useconst>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:pointOfContact">
					<xsl:variable name="var176_pointOfContact" as="node()" select="."/>
					<ptcontac>
						<cntinfo>
							<cntperp>
								<xsl:variable name="var178_cond_result_exists" as="xs:string?">
									<xsl:if test="not(fn:exists(gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString))">
										<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:if test="fn:exists($var178_cond_result_exists)">
									<cntper>
										<xsl:sequence select="$var178_cond_result_exists"/>
									</cntper>
								</xsl:if>
							</cntperp>
							<cntorgp>
								<xsl:variable name="var182_cond_result_exists" as="xs:string?">
									<xsl:if test="fn:exists(gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
										<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:if test="fn:exists($var182_cond_result_exists)">
									<cntorg>
										<xsl:sequence select="$var182_cond_result_exists"/>
									</cntorg>
								</xsl:if>
								<xsl:variable name="var186_cond_result_exists" as="xs:string?">
									<xsl:if test="fn:exists(gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
										<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:if>
								</xsl:variable>
								<xsl:if test="fn:exists($var186_cond_result_exists)">
									<cntper>
										<xsl:sequence select="$var186_cond_result_exists"/>
									</cntper>
								</xsl:if>
							</cntorgp>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:positionName/gco:CharacterString">
								<cntpos>
									<xsl:sequence select="xs:string(.)"/>
								</cntpos>
							</xsl:for-each>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address">
								<cntaddr>
									<addrtype>
										<xsl:variable name="var194_cond_result_exists" as="xs:string" select="(if (fn:exists(gmd:deliveryPoint/gco:CharacterString)) then 'mailing' else 'Unknown')"/>
										<xsl:sequence select="xs:string(xs:string($var194_cond_result_exists))"/>
									</addrtype>
									<xsl:for-each select="gmd:deliveryPoint/gco:CharacterString">
										<address>
											<xsl:sequence select="xs:string(.)"/>
										</address>
									</xsl:for-each>
									<xsl:for-each select="gmd:city/gco:CharacterString">
										<city>
											<xsl:sequence select="xs:string(.)"/>
										</city>
									</xsl:for-each>
									<xsl:for-each select="gmd:administrativeArea/gco:CharacterString">
										<state>
											<xsl:sequence select="xs:string(.)"/>
										</state>
									</xsl:for-each>
									<xsl:for-each select="gmd:postalCode/gco:CharacterString">
										<postal>
											<xsl:sequence select="xs:string(.)"/>
										</postal>
									</xsl:for-each>
									<xsl:for-each select="gmd:country/gco:CharacterString">
										<country>
											<xsl:sequence select="xs:string(.)"/>
										</country>
									</xsl:for-each>
								</cntaddr>
							</xsl:for-each>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:voice/gco:CharacterString">
								<cntvoice>
									<xsl:sequence select="xs:string(.)"/>
								</cntvoice>
							</xsl:for-each>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:facsimile/gco:CharacterString">
								<cntfax>
									<xsl:sequence select="xs:string(.)"/>
								</cntfax>
							</xsl:for-each>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString">
								<cntemail>
									<xsl:sequence select="xs:string(.)"/>
								</cntemail>
							</xsl:for-each>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:hoursOfService/gco:CharacterString">
								<hours>
									<xsl:sequence select="xs:string(.)"/>
								</hours>
							</xsl:for-each>
							<xsl:for-each select="gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:contactInstructions/gco:CharacterString">
								<cntinst>
									<xsl:sequence select="xs:string(.)"/>
								</cntinst>
							</xsl:for-each>
						</cntinfo>
					</ptcontac>
				</xsl:for-each>
				<browse>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:graphicOverview/gmd:MD_BrowseGraphic/gmd:fileName/gco:CharacterString">
						<browsen>
							<xsl:sequence select="xs:string(.)"/>
						</browsen>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:graphicOverview/gmd:MD_BrowseGraphic/gmd:fileDescription/gco:CharacterString">
						<browsed>
							<xsl:sequence select="xs:string(.)"/>
						</browsed>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:graphicOverview/gmd:MD_BrowseGraphic/gmd:fileType/gco:CharacterString">
						<browset>
							<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
						</browset>
					</xsl:for-each>
				</browse>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:credit/gco:CharacterString">
					<datacred>
						<xsl:sequence select="xs:string(.)"/>
					</datacred>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_SecurityConstraints">
					<secinfo>
						<xsl:for-each select="gmd:classificationSystem/gco:CharacterString">
							<secsys>
								<xsl:sequence select="xs:string(.)"/>
							</secsys>
						</xsl:for-each>
						<xsl:for-each select="gmd:classification/gmd:MD_ClassificationCode">
							<secclass>
								<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
							</secclass>
						</xsl:for-each>
						<xsl:for-each select="gmd:handlingDescription/gco:CharacterString">
							<sechandl>
								<xsl:sequence select="xs:string(.)"/>
							</sechandl>
						</xsl:for-each>
					</secinfo>
				</xsl:for-each>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:environmentDescription/gco:CharacterString">
					<gmd:ative>
						<xsl:sequence select="xs:string(.)"/>
					</gmd:ative>
				</xsl:for-each>
			</idinfo>
			<dataqual>
				<attracc>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_QuantitativeAttributeAccuracy/gmd:evaluationMethodDescription/gco:CharacterString">
						<attraccr>
							<xsl:sequence select="xs:string(.)"/>
						</attraccr>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_QuantitativeAttributeAccuracy">
						<qattracc>
							<xsl:for-each select="gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record">
								<attraccv>
									<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
								</attraccv>
							</xsl:for-each>
							<xsl:for-each select="gmd:measureDescription/gco:CharacterString">
								<attracce>
									<xsl:sequence select="xs:string(.)"/>
								</attracce>
							</xsl:for-each>
						</qattracc>
					</xsl:for-each>
				</attracc>
				<xsl:variable name="var241_cond_result_exists" as="xs:string?" select="(if (fn:exists($var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_ConceptualConsistency)) then 'Conceptual Consistency: ' else ())"/>
				<xsl:if test="fn:exists($var241_cond_result_exists)">
					<xsl:variable name="var245_map_select_MD_Metadata" as="xs:string*">
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_ConceptualConsistency/gmd:result/@gco:nilReason">
							<xsl:sequence select="xs:string(xs:string(.))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var242_cond_result_exists" as="xs:string*">
						<xsl:choose>
							<xsl:when test="fn:exists($var245_map_select_MD_Metadata)">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_ConceptualConsistency/gmd:result/@gco:nilReason">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_ConceptualConsistency/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="$var242_cond_result_exists">
						<logic>
							<xsl:sequence select="fn:concat($var241_cond_result_exists, .)"/>
						</logic>
					</xsl:for-each>
				</xsl:if>
				<xsl:variable name="var253_cond_result_exists" as="xs:string?" select="(if (fn:exists($var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessCommission)) then 'Completeness Commission: ' else ())"/>
				<xsl:if test="fn:exists($var253_cond_result_exists)">
					<xsl:variable name="var269_map_select_MD_Metadata" as="xs:string*">
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessCommission/gmd:result/@gco:nilReason">
							<xsl:sequence select="xs:string(xs:string(.))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var254_cond_result_exists" as="xs:string*">
						<xsl:choose>
							<xsl:when test="fn:exists($var269_map_select_MD_Metadata)">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessCommission/gmd:result/@gco:nilReason">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessCommission/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record">
									<xsl:sequence select="xs:string(.)"/>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="$var254_cond_result_exists">
						<xsl:variable name="var255_cur_cond_result_exists" as="xs:string" select="."/>
						<xsl:variable name="var257_cond_result_exists" as="xs:string?" select="(if (fn:exists($var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessOmission)) then 'Completeness Omission: ' else ())"/>
						<xsl:if test="fn:exists($var257_cond_result_exists)">
							<xsl:variable name="var261_map_select_MD_Metadata" as="xs:string*">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessOmission/gmd:result/@gco:nilReason">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var258_cond_result_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="fn:exists($var261_map_select_MD_Metadata)">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessOmission/gmd:result/@gco:nilReason">
											<xsl:sequence select="xs:string(xs:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:report/gmd:DQ_CompletenessOmission/gmd:result/gmd:DQ_QuantitativeResult/gmd:value/gco:Record">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var258_cond_result_exists">
								<complete>
									<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:concat($var253_cond_result_exists, $var255_cur_cond_result_exists), ' '), $var257_cond_result_exists), .)"/>
								</complete>
							</xsl:for-each>
						</xsl:if>
					</xsl:for-each>
				</xsl:if>
				<lineage>
					<srcinfo>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:source/gmd:LI_Source/gmd:sourceCitation">
							<srccite>
								<xsl:for-each select="gmd:CI_Citation">
									<xsl:variable name="var279_CI_Citation" as="node()" select="."/>
									<citeinfo>
										<xsl:variable name="var284_map_select_citedResponsibleParty" as="xs:string*">
											<xsl:for-each select="gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
												<xsl:sequence select="xs:string(.)"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="var281_cond_result_exists" as="xs:string*">
											<xsl:choose>
												<xsl:when test="fn:exists($var284_map_select_citedResponsibleParty)">
													<xsl:for-each select="gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
														<xsl:sequence select="xs:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
														<xsl:sequence select="xs:string(.)"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var281_cond_result_exists">
											<origin>
												<xsl:sequence select="xs:string(xs:string(.))"/>
											</origin>
										</xsl:for-each>
										<xsl:variable name="var292_cond_result_exists">
											<xsl:if test="fn:exists(gmd:date/gmd:CI_Date/gmd:date/@gco:nilReason)">
												<xsl:variable name="var310_map_select_date">
													<xsl:for-each select="gmd:date/gmd:CI_Date">
														<xsl:variable name="var311_CI_Date" as="node()" select="."/>
														<xsl:if test="$var311_CI_Date/gmd:date/@gco:nilReason">
															<xsl:sequence select="xs:string(gmd:date/@gco:nilReason)"/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:if test="fn:exists($var310_map_select_date)">
													<xsl:sequence select="xs:anySimpleType(fn:string-join(for $x in $var310_map_select_date return xs:string($x), ' '))"/>
												</xsl:if>
											</xsl:if>
										</xsl:variable>
										<xsl:for-each select="$var292_cond_result_exists">
											<xsl:variable name="var293_cur_cond_result_exists" select="."/>
											<xsl:variable name="var301_map_select_date" as="xs:string*">
												<xsl:for-each select="$var279_CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
													<xsl:sequence select="xs:string(xs:string(.))"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var295_cond_result_exists" as="xs:string*">
												<xsl:choose>
													<xsl:when test="fn:exists($var301_map_select_date)">
														<xsl:for-each select="$var279_CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:Date">
															<xsl:sequence select="xs:string(xs:string(.))"/>
														</xsl:for-each>
													</xsl:when>
													<xsl:otherwise>
														<xsl:for-each select="$var279_CI_Citation/gmd:date/gmd:CI_Date/gmd:date/gco:DateTime">
															<xsl:sequence select="xs:string(xs:dateTime(.))"/>
														</xsl:for-each>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:for-each select="$var295_cond_result_exists">
												<xsl:variable name="var298_map_select_date" as="xs:boolean*">
													<xsl:for-each select="$var279_CI_Citation/gmd:date/gmd:CI_Date/gmd:dateType/gmd:CI_DateTypeCode">
														<xsl:if test="(xs:string(xs:anyURI(@codeListValue)) = 'publication')">
															<xsl:sequence select="fn:true()"/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:if test="fn:exists($var298_map_select_date)">
													<pubdate>
														<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:concat(xs:string($var293_cur_cond_result_exists), fn:substring-before(., '-')), fn:substring(fn:substring-after(., '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(., xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
													</pubdate>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="gmd:title/gco:CharacterString">
											<title>
												<xsl:sequence select="xs:string(.)"/>
											</title>
										</xsl:for-each>
										<xsl:for-each select="gmd:edition/gco:CharacterString">
											<edition>
												<xsl:sequence select="xs:string(.)"/>
											</edition>
										</xsl:for-each>
										<xsl:for-each select="gmd:presentationForm/gmd:CI_PresentationFormCode">
											<xsl:variable name="var319_result_vmf1_inputtoresult" as="xs:string?">
												<xsl:call-template name="vmf:vmf1_inputtoresult">
													<xsl:with-param name="input" select="xs:string(xs:anyURI(@codeListValue))"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="fn:exists($var319_result_vmf1_inputtoresult)">
												<geoform>
													<xsl:sequence select="xs:string(xs:string($var319_result_vmf1_inputtoresult))"/>
												</geoform>
											</xsl:if>
										</xsl:for-each>
										<serinfo>
											<xsl:for-each select="gmd:series/gmd:CI_Series/gmd:name/gco:CharacterString">
												<sername>
													<xsl:sequence select="xs:string(.)"/>
												</sername>
											</xsl:for-each>
											<xsl:for-each select="gmd:series/gmd:CI_Series/gmd:issueIdentification/gco:CharacterString">
												<issue>
													<xsl:sequence select="xs:string(.)"/>
												</issue>
											</xsl:for-each>
										</serinfo>
										<xsl:for-each select="gmd:otherCitationDetails/gco:CharacterString">
											<xsl:variable name="var324_CharacterString" as="node()" select="."/>
											<xsl:variable name="var326_cond_result_exists" as="xs:string?">
												<xsl:choose>
													<xsl:when test="fn:exists($var279_CI_Citation/gmd:alternateTitle/gco:CharacterString)">
														<xsl:variable name="var341_map_select_alternateTitle" as="xs:string*">
															<xsl:for-each select="$var279_CI_Citation/gmd:alternateTitle/gco:CharacterString">
																<xsl:sequence select="xs:string(.)"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:if test="fn:exists($var341_map_select_alternateTitle)">
															<xsl:sequence select="xs:string(fn:string-join($var341_map_select_alternateTitle, ' '))"/>
														</xsl:if>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="''"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:for-each select="$var326_cond_result_exists">
												<xsl:variable name="var329_cond_result_exists" as="xs:string?">
													<xsl:choose>
														<xsl:when test="fn:exists($var279_CI_Citation/gmd:ISBN/gco:CharacterString)">
															<xsl:for-each select="$var279_CI_Citation/gmd:ISBN/gco:CharacterString">
																<xsl:sequence select="xs:string(.)"/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="''"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:if test="fn:exists($var329_cond_result_exists)">
													<xsl:variable name="var330_cond_result_exists" as="xs:string?">
														<xsl:choose>
															<xsl:when test="fn:exists($var279_CI_Citation/gmd:ISSN/gco:CharacterString)">
																<xsl:for-each select="$var279_CI_Citation/gmd:ISSN/gco:CharacterString">
																	<xsl:sequence select="xs:string(.)"/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="''"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:if test="fn:exists($var330_cond_result_exists)">
														<othercit>
															<xsl:variable name="var331_cond_result_exists" as="xs:string" select="(if (fn:exists($var279_CI_Citation/gmd:alternateTitle/gco:CharacterString)) then 'Alternative Title: ' else '')"/>
															<xsl:variable name="var332_cond_result_exists" as="xs:string" select="(if (fn:exists($var279_CI_Citation/gmd:ISBN/gco:CharacterString)) then 'ISBN: ' else '')"/>
															<xsl:variable name="var333_cond_result_exists" as="xs:string" select="(if (fn:exists($var279_CI_Citation/gmd:ISSN/gco:CharacterString)) then 'ISSN: ' else '')"/>
															<xsl:sequence select="fn:string(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(xs:string($var324_CharacterString), ''), $var331_cond_result_exists), .), ''), ''), $var332_cond_result_exists), $var329_cond_result_exists), ''), $var333_cond_result_exists), $var330_cond_result_exists))"/>
														</othercit>
													</xsl:if>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="gmd:citedResponsibleParty/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:onlineResource/gmd:CI_OnlineResource/gmd:linkage/gmd:URL">
											<onlink>
												<xsl:sequence select="xs:string(xs:anyURI(.))"/>
											</onlink>
										</xsl:for-each>
									</citeinfo>
								</xsl:for-each>
							</srccite>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:source/gmd:LI_Source/gmd:scaleDenominator/gmd:MD_RepresentativeFraction/gmd:denominator/gco:Integer">
							<srcscale>
								<xsl:sequence select="xs:string(xs:integer(.))"/>
							</srcscale>
						</xsl:for-each>
						<srctime>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:source/gmd:LI_Source/gmd:sourceExtent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimeInstant/gml:description">
								<srccurr>
									<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
								</srccurr>
							</xsl:for-each>
						</srctime>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:source/gmd:LI_Source/gmd:sourceCitation/gmd:CI_Citation/gmd:identifier/gmd:MD_Identifier/gmd:code/gco:CharacterString">
							<srccitea>
								<xsl:sequence select="xs:string(.)"/>
							</srccitea>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:source/gmd:LI_Source/gmd:description/gco:CharacterString">
							<srccontr>
								<xsl:sequence select="xs:string(.)"/>
							</srccontr>
						</xsl:for-each>
					</srcinfo>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:processStep/gmd:LI_ProcessStep">
						<procstep>
							<xsl:for-each select="gmd:description/gco:CharacterString">
								<procdesc>
									<xsl:sequence select="xs:string(.)"/>
								</procdesc>
							</xsl:for-each>
							<xsl:for-each select="gmd:source/gmd:LI_Source/gmd:sourceCitation/gmd:CI_Citation/gmd:title/gco:CharacterString">
								<srcused>
									<xsl:sequence select="xs:string(.)"/>
								</srcused>
							</xsl:for-each>
							<xsl:for-each select="gmd:dateTime/gco:DateTime">
								<procdate>
									<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(xs:string(xs:dateTime(.)), '-'), fn:substring(fn:substring-after(xs:string(xs:dateTime(.)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:dateTime(.)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
								</procdate>
							</xsl:for-each>
							<xsl:for-each select="gmd:processor">
								<proccont>
									<xsl:for-each select="gmd:CI_ResponsibleParty">
										<xsl:variable name="var364_CI_ResponsibleParty" as="node()" select="."/>
										<cntinfo>
											<cntperp>
												<xsl:variable name="var366_cond_result_exists" as="xs:string?">
													<xsl:if test="not(fn:exists(gmd:organisationName/gco:CharacterString))">
														<xsl:for-each select="gmd:individualName/gco:CharacterString">
															<xsl:sequence select="xs:string(.)"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:if test="fn:exists($var366_cond_result_exists)">
													<cntper>
														<xsl:sequence select="$var366_cond_result_exists"/>
													</cntper>
												</xsl:if>
											</cntperp>
											<cntorgp>
												<xsl:variable name="var370_cond_result_exists" as="xs:string?">
													<xsl:if test="fn:exists(gmd:organisationName/gco:CharacterString)">
														<xsl:for-each select="gmd:organisationName/gco:CharacterString">
															<xsl:sequence select="xs:string(.)"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:if test="fn:exists($var370_cond_result_exists)">
													<cntorg>
														<xsl:sequence select="$var370_cond_result_exists"/>
													</cntorg>
												</xsl:if>
												<xsl:variable name="var374_cond_result_exists" as="xs:string?">
													<xsl:if test="fn:exists(gmd:organisationName/gco:CharacterString)">
														<xsl:for-each select="gmd:individualName/gco:CharacterString">
															<xsl:sequence select="xs:string(.)"/>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:if test="fn:exists($var374_cond_result_exists)">
													<cntper>
														<xsl:sequence select="$var374_cond_result_exists"/>
													</cntper>
												</xsl:if>
											</cntorgp>
											<xsl:for-each select="gmd:positionName/gco:CharacterString">
												<cntpos>
													<xsl:sequence select="xs:string(.)"/>
												</cntpos>
											</xsl:for-each>
											<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address">
												<cntaddr>
													<addrtype>
														<xsl:variable name="var382_cond_result_exists" as="xs:string" select="(if (fn:exists(gmd:deliveryPoint/gco:CharacterString)) then 'mailing' else 'Unknown')"/>
														<xsl:sequence select="xs:string(xs:string($var382_cond_result_exists))"/>
													</addrtype>
													<xsl:for-each select="gmd:deliveryPoint/gco:CharacterString">
														<address>
															<xsl:sequence select="xs:string(.)"/>
														</address>
													</xsl:for-each>
													<xsl:for-each select="gmd:city/gco:CharacterString">
														<city>
															<xsl:sequence select="xs:string(.)"/>
														</city>
													</xsl:for-each>
													<xsl:for-each select="gmd:administrativeArea/gco:CharacterString">
														<state>
															<xsl:sequence select="xs:string(.)"/>
														</state>
													</xsl:for-each>
													<xsl:for-each select="gmd:postalCode/gco:CharacterString">
														<postal>
															<xsl:sequence select="xs:string(.)"/>
														</postal>
													</xsl:for-each>
													<xsl:for-each select="gmd:country/gco:CharacterString">
														<country>
															<xsl:sequence select="xs:string(.)"/>
														</country>
													</xsl:for-each>
												</cntaddr>
											</xsl:for-each>
											<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:voice/gco:CharacterString">
												<cntvoice>
													<xsl:sequence select="xs:string(.)"/>
												</cntvoice>
											</xsl:for-each>
											<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:facsimile/gco:CharacterString">
												<cntfax>
													<xsl:sequence select="xs:string(.)"/>
												</cntfax>
											</xsl:for-each>
											<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString">
												<cntemail>
													<xsl:sequence select="xs:string(.)"/>
												</cntemail>
											</xsl:for-each>
											<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:hoursOfService/gco:CharacterString">
												<hours>
													<xsl:sequence select="xs:string(.)"/>
												</hours>
											</xsl:for-each>
											<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:contactInstructions/gco:CharacterString">
												<cntinst>
													<xsl:sequence select="xs:string(.)"/>
												</cntinst>
											</xsl:for-each>
										</cntinfo>
									</xsl:for-each>
								</proccont>
							</xsl:for-each>
						</procstep>
					</xsl:for-each>
				</lineage>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contentInfo/gmd:MD_ImageDescription/gmd:cloudCoverPercentage/gco:Real">
					<cloud>
						<xsl:sequence select="xs:string(xs:string(xs:string(xs:double(.))))"/>
					</cloud>
				</xsl:for-each>
			</dataqual>
			<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution">
				<xsl:variable name="var405_MD_Distribution" as="node()" select="."/>
				<distinfo>
					<xsl:for-each select="gmd:distributor/gmd:MD_Distributor">
						<distrib>
							<xsl:for-each select="gmd:distributorContact/gmd:CI_ResponsibleParty">
								<xsl:variable name="var409_CI_ResponsibleParty" as="node()" select="."/>
								<cntinfo>
									<cntperp>
										<xsl:variable name="var411_cond_result_exists" as="xs:string?">
											<xsl:if test="not(fn:exists(gmd:organisationName/gco:CharacterString))">
												<xsl:for-each select="gmd:individualName/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var411_cond_result_exists)">
											<cntper>
												<xsl:sequence select="$var411_cond_result_exists"/>
											</cntper>
										</xsl:if>
									</cntperp>
									<cntorgp>
										<xsl:variable name="var415_cond_result_exists" as="xs:string?">
											<xsl:if test="fn:exists(gmd:organisationName/gco:CharacterString)">
												<xsl:for-each select="gmd:organisationName/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var415_cond_result_exists)">
											<cntorg>
												<xsl:sequence select="$var415_cond_result_exists"/>
											</cntorg>
										</xsl:if>
										<xsl:variable name="var419_cond_result_exists" as="xs:string?">
											<xsl:if test="fn:exists(gmd:organisationName/gco:CharacterString)">
												<xsl:for-each select="gmd:individualName/gco:CharacterString">
													<xsl:sequence select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:if>
										</xsl:variable>
										<xsl:if test="fn:exists($var419_cond_result_exists)">
											<cntper>
												<xsl:sequence select="$var419_cond_result_exists"/>
											</cntper>
										</xsl:if>
									</cntorgp>
									<xsl:for-each select="gmd:positionName/gco:CharacterString">
										<cntpos>
											<xsl:sequence select="xs:string(.)"/>
										</cntpos>
									</xsl:for-each>
									<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address">
										<cntaddr>
											<addrtype>
												<xsl:variable name="var427_cond_result_exists" as="xs:string" select="(if (fn:exists(gmd:deliveryPoint/gco:CharacterString)) then 'mailing' else 'Unknown')"/>
												<xsl:sequence select="xs:string(xs:string($var427_cond_result_exists))"/>
											</addrtype>
											<xsl:for-each select="gmd:deliveryPoint/gco:CharacterString">
												<address>
													<xsl:sequence select="xs:string(.)"/>
												</address>
											</xsl:for-each>
											<xsl:for-each select="gmd:city/gco:CharacterString">
												<city>
													<xsl:sequence select="xs:string(.)"/>
												</city>
											</xsl:for-each>
											<xsl:for-each select="gmd:administrativeArea/gco:CharacterString">
												<state>
													<xsl:sequence select="xs:string(.)"/>
												</state>
											</xsl:for-each>
											<xsl:for-each select="gmd:postalCode/gco:CharacterString">
												<postal>
													<xsl:sequence select="xs:string(.)"/>
												</postal>
											</xsl:for-each>
											<xsl:for-each select="gmd:country/gco:CharacterString">
												<country>
													<xsl:sequence select="xs:string(.)"/>
												</country>
											</xsl:for-each>
										</cntaddr>
									</xsl:for-each>
									<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:voice/gco:CharacterString">
										<cntvoice>
											<xsl:sequence select="xs:string(.)"/>
										</cntvoice>
									</xsl:for-each>
									<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:facsimile/gco:CharacterString">
										<cntfax>
											<xsl:sequence select="xs:string(.)"/>
										</cntfax>
									</xsl:for-each>
									<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString">
										<cntemail>
											<xsl:sequence select="xs:string(.)"/>
										</cntemail>
									</xsl:for-each>
									<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:hoursOfService/gco:CharacterString">
										<hours>
											<xsl:sequence select="xs:string(.)"/>
										</hours>
									</xsl:for-each>
									<xsl:for-each select="gmd:contactInfo/gmd:CI_Contact/gmd:contactInstructions/gco:CharacterString">
										<cntinst>
											<xsl:sequence select="xs:string(.)"/>
										</cntinst>
									</xsl:for-each>
								</cntinfo>
							</xsl:for-each>
						</distrib>
					</xsl:for-each>
					<stdorder>
						<digform>
							<xsl:for-each select="gmd:distributionFormat/gmd:MD_Format">
								<digtinfo>
									<xsl:for-each select="gmd:name/gco:CharacterString">
										<formname>
											<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
										</formname>
									</xsl:for-each>
									<xsl:for-each select="gmd:version/gco:CharacterString">
										<formvern>
											<xsl:sequence select="xs:string(.)"/>
										</formvern>
									</xsl:for-each>
									<xsl:for-each select="gmd:specification/gco:CharacterString">
										<formspec>
											<xsl:sequence select="xs:string(.)"/>
										</formspec>
									</xsl:for-each>
									<xsl:for-each select="gmd:fileDecompressionTechnique/gco:CharacterString">
										<filedec>
											<xsl:sequence select="xs:string(xs:string(xs:string(.)))"/>
										</filedec>
									</xsl:for-each>
									<xsl:for-each select="$var405_MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:transferSize/gco:Real">
										<transize>
											<xsl:sequence select="xs:string(xs:double(.))"/>
										</transize>
									</xsl:for-each>
								</digtinfo>
							</xsl:for-each>
							<digtopt>
								<xsl:for-each select="gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine">
									<xsl:variable name="var460_onLine" as="node()" select="."/>
									<onlinopt>
										<computer>
											<gmd:etworka>
												<xsl:variable name="var463_map_select_CI_OnlineResource" as="xs:string?">
													<xsl:for-each select="gmd:CI_OnlineResource/gmd:linkage/gmd:URL">
														<xsl:sequence select="xs:string(xs:anyURI(.))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var462_cond_result_exists" as="xs:string?">
													<xsl:choose>
														<xsl:when test="fn:exists($var463_map_select_CI_OnlineResource)">
															<xsl:for-each select="gmd:CI_OnlineResource/gmd:linkage/gmd:URL">
																<xsl:sequence select="xs:string(xs:anyURI(.))"/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:for-each select="gmd:CI_OnlineResource/gmd:name/gco:CharacterString">
																<xsl:sequence select="xs:string(.)"/>
															</xsl:for-each>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:if test="fn:exists($var462_cond_result_exists)">
													<gmd:etworkr>
														<xsl:sequence select="$var462_cond_result_exists"/>
													</gmd:etworkr>
												</xsl:if>
											</gmd:etworka>
										</computer>
									</onlinopt>
								</xsl:for-each>
								<xsl:for-each select="gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:offLine">
									<offoptn>
										<xsl:for-each select="gmd:MD_Medium/gmd:name/gmd:MD_MediumNameCode">
											<offmedia>
												<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
											</offmedia>
										</xsl:for-each>
										<reccap>
											<xsl:for-each select="gmd:MD_Medium/gmd:density/gco:Real">
												<recden>
													<xsl:sequence select="xs:string(xs:double(.))"/>
												</recden>
											</xsl:for-each>
											<xsl:for-each select="gmd:MD_Medium/gmd:densityUnits/gco:CharacterString">
												<recdenu>
													<xsl:sequence select="xs:string(.)"/>
												</recdenu>
											</xsl:for-each>
										</reccap>
										<xsl:for-each select="gmd:MD_Medium/gmd:mediumFormat/gmd:MD_MediumFormatCode">
											<recfmt>
												<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
											</recfmt>
										</xsl:for-each>
										<xsl:for-each select="$var405_MD_Distribution/gmd:distributor/gmd:MD_Distributor/gmd:distributorTransferOptions/gmd:MD_DigitalTransferOptions/gmd:offLine/gmd:MD_Medium/gmd:mediumNote/gco:CharacterString">
											<compat>
												<xsl:sequence select="xs:string(.)"/>
											</compat>
										</xsl:for-each>
									</offoptn>
								</xsl:for-each>
							</digtopt>
						</digform>
						<xsl:for-each select="gmd:distributor/gmd:MD_Distributor/gmd:distributionOrderProcess/gmd:MD_StandardOrderProcess/gmd:fees/gco:CharacterString">
							<fees>
								<xsl:sequence select="xs:string(.)"/>
							</fees>
						</xsl:for-each>
						<xsl:for-each select="gmd:distributor/gmd:MD_Distributor/gmd:distributionOrderProcess/gmd:MD_StandardOrderProcess/gmd:orderingInstructions/gco:CharacterString">
							<ordering>
								<xsl:sequence select="xs:string(.)"/>
							</ordering>
						</xsl:for-each>
						<xsl:for-each select="gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:offLine/gmd:MD_Medium/gmd:mediumNote/gco:CharacterString">
							<turnarnd>
								<xsl:sequence select="xs:string(.)"/>
							</turnarnd>
						</xsl:for-each>
					</stdorder>
					<availabl>
						<timeinfo>
							<xsl:for-each select="gmd:distributor/gmd:MD_Distributor/gmd:distributionOrderProcess/gmd:MD_StandardOrderProcess/gmd:plannedAvailableDateTime">
								<sngdate>
									<xsl:for-each select="gco:DateTime">
										<caldate>
											<xsl:sequence select="xs:string(xs:string(fn:concat(fn:concat(fn:substring-before(xs:string(xs:dateTime(.)), '-'), fn:substring(fn:substring-after(xs:string(xs:dateTime(.)), '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring(xs:string(xs:dateTime(.)), xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
										</caldate>
									</xsl:for-each>
								</sngdate>
							</xsl:for-each>
						</timeinfo>
					</availabl>
				</distinfo>
			</xsl:for-each>
			<metainfo>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:dateStamp/gco:Date">
					<metd>
						<xsl:sequence select="xs:string(xs:date(xs:string(.)))"/>
					</metd>
				</xsl:for-each>
				<xsl:variable name="var507_map_select_MD_Metadata" as="xs:string?">
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/@gco:nilReason">
						<xsl:sequence select="xs:string(xs:string(.))"/>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var496_cond_result_exists" as="xs:string?">
					<xsl:choose>
						<xsl:when test="fn:exists($var507_map_select_MD_Metadata)">
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/@gco:nilReason">
								<xsl:sequence select="xs:string(xs:string(.))"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/gco:Date">
								<xsl:sequence select="xs:string(xs:string(.))"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="var495_cond_result_exists" as="xs:string?">
					<xsl:choose>
						<xsl:when test="$var496_cond_result_exists">
							<xsl:variable name="var498_map_select_MD_Metadata" as="xs:string?">
								<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/@gco:nilReason">
									<xsl:sequence select="xs:string(xs:string(.))"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="fn:exists($var498_map_select_MD_Metadata)">
									<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/@gco:nilReason">
										<xsl:sequence select="xs:string(xs:string(.))"/>
									</xsl:for-each>
								</xsl:when>
								<xsl:otherwise>
									<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/gco:Date">
										<xsl:sequence select="xs:string(xs:string(.))"/>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataMaintenance/gmd:MD_MaintenanceInformation/gmd:dateOfNextUpdate/gco:DateTime">
								<xsl:sequence select="xs:string(xs:dateTime(.))"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:if test="fn:exists($var495_cond_result_exists)">
					<metfrd>
						<xsl:sequence select="xs:string(xs:token(fn:concat(fn:concat(fn:substring-before($var495_cond_result_exists, '-'), fn:substring(fn:substring-after($var495_cond_result_exists, '-'), xs:double(xs:decimal(0)), xs:double('3'))), fn:substring($var495_cond_result_exists, xs:double(xs:decimal(9)), xs:double(xs:decimal(2))))))"/>
					</metfrd>
				</xsl:if>
				<metc>
					<cntinfo>
						<cntperp>
							<xsl:variable name="var515_cond_result_exists" as="xs:string?">
								<xsl:if test="not(fn:exists($var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString))">
									<xsl:variable name="var519_map_select_MD_Metadata" as="xs:string*">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var519_map_select_MD_Metadata)">
										<xsl:sequence select="xs:string(fn:string-join($var519_map_select_MD_Metadata, ' '))"/>
									</xsl:if>
								</xsl:if>
							</xsl:variable>
							<xsl:for-each select="$var515_cond_result_exists">
								<cntper>
									<xsl:sequence select="."/>
								</cntper>
							</xsl:for-each>
						</cntperp>
						<cntorgp>
							<xsl:variable name="var522_cond_result_exists" as="xs:string?">
								<xsl:if test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
									<xsl:variable name="var526_map_select_MD_Metadata" as="xs:string*">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var526_map_select_MD_Metadata)">
										<xsl:sequence select="xs:string(fn:string-join($var526_map_select_MD_Metadata, ' '))"/>
									</xsl:if>
								</xsl:if>
							</xsl:variable>
							<xsl:for-each select="$var522_cond_result_exists">
								<cntorg>
									<xsl:sequence select="."/>
								</cntorg>
							</xsl:for-each>
							<xsl:variable name="var529_cond_result_exists" as="xs:string?">
								<xsl:if test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString)">
									<xsl:variable name="var533_map_select_MD_Metadata" as="xs:string*">
										<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:individualName/gco:CharacterString">
											<xsl:sequence select="xs:string(.)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var533_map_select_MD_Metadata)">
										<xsl:sequence select="xs:string(fn:string-join($var533_map_select_MD_Metadata, ' '))"/>
									</xsl:if>
								</xsl:if>
							</xsl:variable>
							<xsl:for-each select="$var529_cond_result_exists">
								<cntper>
									<xsl:sequence select="."/>
								</cntper>
							</xsl:for-each>
						</cntorgp>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:positionName/gco:CharacterString">
							<cntpos>
								<xsl:sequence select="xs:string(.)"/>
							</cntpos>
						</xsl:for-each>
						<cntaddr>
							<addrtype>
								<xsl:variable name="var538_cond_result_exists" as="xs:string" select="(if (fn:exists($var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:deliveryPoint/gco:CharacterString)) then 'mailing' else 'Unknown')"/>
								<xsl:sequence select="xs:string(xs:string($var538_cond_result_exists))"/>
							</addrtype>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:deliveryPoint/gco:CharacterString">
								<address>
									<xsl:sequence select="xs:string(.)"/>
								</address>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:city/gco:CharacterString">
								<city>
									<xsl:sequence select="xs:string(.)"/>
								</city>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:administrativeArea/gco:CharacterString">
								<state>
									<xsl:sequence select="xs:string(.)"/>
								</state>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:postalCode/gco:CharacterString">
								<postal>
									<xsl:sequence select="xs:string(.)"/>
								</postal>
							</xsl:for-each>
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:country/gco:CharacterString">
								<country>
									<xsl:sequence select="xs:string(.)"/>
								</country>
							</xsl:for-each>
						</cntaddr>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:voice/gco:CharacterString">
							<cntvoice>
								<xsl:sequence select="xs:string(.)"/>
							</cntvoice>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:phone/gmd:CI_Telephone/gmd:facsimile/gco:CharacterString">
							<cntfax>
								<xsl:sequence select="xs:string(.)"/>
							</cntfax>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:address/gmd:CI_Address/gmd:electronicMailAddress/gco:CharacterString">
							<cntemail>
								<xsl:sequence select="xs:string(.)"/>
							</cntemail>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:hoursOfService/gco:CharacterString">
							<hours>
								<xsl:sequence select="xs:string(.)"/>
							</hours>
						</xsl:for-each>
						<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:contact/gmd:CI_ResponsibleParty/gmd:contactInfo/gmd:CI_Contact/gmd:contactInstructions/gco:CharacterString">
							<cntinst>
								<xsl:sequence select="xs:string(.)"/>
							</cntinst>
						</xsl:for-each>
					</cntinfo>
				</metc>
				<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataStandardName/gco:CharacterString">
					<metstdn>
						<xsl:sequence select="xs:string(xs:string(fn:concat('FGDC Content Standard for Digital Geospatial Metadata automated from ', xs:string(.))))"/>
					</metstdn>
				</xsl:for-each>
				<xsl:variable name="var561_cond_result_exists" as="xs:string?">
					<xsl:choose>
						<xsl:when test="fn:exists($var1_instance/gmd:MD_Metadata/gmd:metadataStandardVersion/gco:CharacterString)">
							<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataStandardVersion/gco:CharacterString">
								<xsl:sequence select="xs:string(.)"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:if test="fn:exists($var561_cond_result_exists)">
					<metstdv>
						<xsl:variable name="var562_cond_result_exists" as="xs:string" select="(if (fn:exists($var1_instance/gmd:MD_Metadata/gmd:metadataStandardVersion/gco:CharacterString)) then 'FGDC-STD-001-1998 automated from ' else 'FGDC-STD-001-1998')"/>
						<xsl:sequence select="fn:concat($var562_cond_result_exists, $var561_cond_result_exists)"/>
					</metstdv>
				</xsl:if>
				<metsi>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataConstraints/gmd:MD_SecurityConstraints/gmd:classificationSystem/gco:CharacterString">
						<metscs>
							<xsl:sequence select="xs:string(.)"/>
						</metscs>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataConstraints/gmd:MD_SecurityConstraints/gmd:classification/gmd:MD_ClassificationCode">
						<metsc>
							<xsl:sequence select="xs:string(xs:string(xs:string(xs:anyURI(@codeListValue))))"/>
						</metsc>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataConstraints/gmd:MD_SecurityConstraints/gmd:handlingDescription/gco:CharacterString">
						<metshd>
							<xsl:sequence select="xs:string(.)"/>
						</metshd>
					</xsl:for-each>
				</metsi>
				<metextns>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataExtensionInfo/gmd:MD_MetadataExtensionInformation/gmd:extensionOnLineResource/gmd:CI_OnlineResource/gmd:linkage/gmd:URL">
						<onlink>
							<xsl:sequence select="xs:string(xs:anyURI(.))"/>
						</onlink>
					</xsl:for-each>
					<xsl:for-each select="$var1_instance/gmd:MD_Metadata/gmd:metadataExtensionInfo/gmd:MD_MetadataExtensionInformation/gmd:extensionOnLineResource/gmd:CI_OnlineResource/gmd:name/gco:CharacterString">
						<metprof>
							<xsl:sequence select="xs:string(.)"/>
						</metprof>
					</xsl:for-each>
				</metextns>
			</metainfo>
		</metadata>
	</xsl:template>
</xsl:stylesheet>
